// Class automatically generated by Dev-C++ New Class wizard

#include "vector.h" // class's header file
#include <assert.h>
#include <iomanip>
// class constructor
vector::vector(int n):n(n)
{
	assert(n>0);
	id++;
	arr=new float[n];
	for (int i=0;i<n;i++) arr[i]=0;
}

// class destructor
vector::~vector()
{	
	id--;
	delete []arr;
}
int vector::id=0;

vector::vector(const vector &obj):n(obj.n){
	arr=new float[n];
	for (int i=0;i<n;i++) arr[i]=obj[i];
	id++;
	}
 vector vector::operator=(const vector &obj){
	if (this==&obj) return *this;
	assert(n==obj.n);
	for(int i=0;i<n;i++) arr[i]=obj[i];
	return *this;
	};
const vector vector::operator+=(const vector &obj){
	assert(n==obj.n);
	for(int i=0;i<n;i++) 
		arr[i]+=obj[i];
	return *this;	
	};		
vector &vector::operator+(const vector &obj) const{
	assert(n==obj.n);
	vector *t=new vector(n);
	for(int i=0;i<n;i++) 
		(*t)[i]=arr[i]+obj[i];
	return *t;
	};		
vector vector::operator-(const vector &obj) const{
	assert(n==obj.n);
	vector t(n);
	for(int i=0;i<n;i++) 
		t[i]=arr[i]-obj[i];
	return t;
	};
vector vector::operator*(float arg) const{
	vector t(n);
	for(int i=0;i<n;i++) 
		t[i]=arg*arr[i];
	return t;	
	};
float vector::operator*(const vector &obj) const{
	float sum=0;
	for (int i=0;i<n;i++) sum+=arr[i]*obj[i];
	return sum;
	};
vector operator*(float k,const vector &obj){
	vector a(obj.n);
	for (int i=0;i<obj.n;i++) a[i]=k*obj[i];
	};
istream &operator>>(istream &is,vector &obj){
	for (int i=0;i<obj.n;i++){
		cout<<"arr["<<i<<"]=";
		is>>obj[i];
		}
	return is;	
	};
ostream &operator<<(ostream &os,const vector &obj){
	for(int i=0;i<obj.n;i++){
		os<<setw(5)<<setprecision(2)<<obj[i];
		} 
	return os;	
	};
float &vector::operator[](int i) const{
	if (i>=0 && i<n) return arr[i];
//	return 0;
	};
float vector::operator~()const{
	//module vector
	};
