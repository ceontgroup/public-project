// Class automatically generated by Dev-C++ New Class wizard

template <class T>
vector<T>::vector(int n):n(n)
{
	assert(n>0);
	id++;
	arr=new T[n];
	for (int i=0;i<n;i++) arr[i]=0;
}

// class destructor
template <class T>
vector<T>::~vector()
{	
	id--;
	delete []arr;
}
template <class T>
int vector<T>::id=0;

template <class T>
vector<T>::vector(const vector &obj):n(obj.n){
	arr=new T[n];
	for (int i=0;i<n;i++) arr[i]=obj[i];
	id++;
	}

template <class T>
const vector<T> vector<T>::operator=(const vector &obj){
	if (this==&obj) return *this;
	assert(n==obj.n);
	for(int i=0;i<n;i++) arr[i]=obj[i];
	return *this;
	};

template <class T>
vector<T> vector<T>::operator+=(const vector &obj){
	assert(n==obj.n);
	for(int i=0;i<n;i++) 
		arr[i]+=obj[i];
	return *this;	
	};		

template <class T>
vector<T> vector<T>::operator+(const vector &obj) const{
	assert(n==obj.n);
	vector<T> t(n);
	for(int i=0;i<n;i++) 
		t[i]=arr[i]+obj[i];
	return t;
	};		

template <class T>
vector<T> vector<T>::operator-(const vector &obj) const{
	assert(n==obj.n);
	vector<T> t(n);
	for(int i=0;i<n;i++) 
		t[i]=arr[i]-obj[i];
	return t;
	};
	
template <class T>	
vector<T> vector<T>::operator*(T arg) const{
	vector<T> t(n);
	for(int i=0;i<n;i++) 
		t[i]=arg*arr[i];
	return t;	
	};
	
template <class T>	
T vector<T>::operator*(const vector &obj) const{
	float sum=0;
	for (int i=0;i<n;i++) sum+=arr[i]*obj[i];
	return sum;
	};
	
template <class S,class V>
vector<V> operator*(S k,const vector<V> &obj){
	vector<V> a(obj.n);
	for (int i=0;i<obj.n;i++) 
		a[i]=V(k)*obj[i];
	return a;
	};

template <class S>
istream &operator>>(istream &is,vector<S> &obj){
	for (int i=0;i<obj.n;i++){
		cout<<"arr["<<i<<"]=";
		is>>obj[i];
		}
	return is;	
	};

template <class S>
ostream &operator<<(ostream &os,const vector<S> &obj){
	for(int i=0;i<obj.n;i++){
		os<<setw(5)<<setprecision(2)<<obj[i];
		} 
	return os;	
	};

template <class T>
T &vector<T>::operator[](int i) const{
	if (i>=0 && i<n) return arr[i];
	};
template <class T>
float vector<T>::operator~()const{
	//module vector
	};
