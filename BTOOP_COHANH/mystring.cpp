// Class automatically generated by Dev-C++ New Class wizard

#include "mystring.h" // class's header file
#include <string.h>
#include <stdlib.h>

// class constructor
MyString::MyString(char *s):max(MAXLEN)
{
	length=strlen(s);
	if (length>max) length=max;
	if (length==0) this->s=NULL;
	else{
		this->s=new char[length];
		for(int i=0;i<length;i++) this->s[i]=s[i];
		} 
}
MyString::MyString(const MyString &obj):max(MAXLEN){
	length=obj.length;
	if (length>max) length=max;	
	if (length==0) this->s=NULL;
	else{
		this->s=new char[length];
		for(int i=0;i<length;i++) this->s[i]=s[i];
		} 
	};
// class destructor
MyString::~MyString()
{
	// insert your code here
}
MyString MyString::operator=(const MyString &obj){
	if (this==&obj) return *this;
	else{
		length=obj.length;
		if (length==0) this->s=NULL;
		else{
			this->s=new char[length];
			for(int i=0;i<length;i++) 
				s[i]=obj[i];
			} 
		}
	return *this;
	};
MyString MyString::operator+(const MyString &obj) const{
	MyString tem;
	tem.length=length+obj.length;
	if (tem.length>tem.max) tem.length=tem.max;
	if (tem.length==0) tem.s=NULL;
	else{
		tem.s=new char[tem.length];
		for(int i=0,j=0;i<length || j<obj.length;i++,j++){
			if ((i<length)&&(i<tem.max)) tem[i]=s[i];
			if ((j<obj.length)&&(length+j)<tem.max) tem[length+j]=obj[j];
			}
		}
	return tem;
	};
MyString MyString::operator&(const MyString &obj) const{
	return *this+obj;
	};
bool MyString::operator==(const MyString &obj)const{
	if (length!=obj.length) return false;
	else
		for(int i=0;i<length;i++) if (s[i]!=obj[i]) return false;
	return true;
	};
bool MyString::operator!=(const MyString &obj) const{
	return !(*this==obj);
	};
bool MyString::operator>(const MyString &obj) const{
	if (*this==obj) return false;
	else{
		if(length<obj.length) return false;
		if (length>obj.length) return true;
		for(int i=0;i<length;i++) if(s[i]<obj[i]) return false;
		}
	return true;
	};
bool MyString::operator>=(const MyString &obj) const{
	return ((*this==obj)||(*this>obj));
	};
bool MyString::operator<(const MyString &obj) const{
	return !((*this==obj)||(*this>obj));
	};
bool MyString::operator<=(const MyString &obj) const{
	return !(*this>obj);
	};
istream &operator>>(istream &is,MyString &obj){
	obj.length=0;
	obj.s=new char[obj.max];
	char ch;
	while ((obj.length<obj.max)&&((ch=cin.get())!=10)){
		obj[obj.length++]=ch;
		}
	return is;
	};
ostream &operator<<(ostream &os,const MyString &obj){
	for (int i=0;i<obj.length;i++) os<<obj[i];
	return os;
	};
char &MyString::operator[](int p)const{
	return s[p];
	};
MyString::operator char*()const{
	char *s1=new char[length+1];
	for(int i=0;i<length;i++) s1[i]=s[i];
	s1[length]='\0';
	return s1;
	};//cast type from MyString to char *
