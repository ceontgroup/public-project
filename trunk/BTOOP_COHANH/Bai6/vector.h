// Class automatically generated by Dev-C++ New Class wizard

#ifndef VECTOR_H
#define VECTOR_H
#include <iostream>
#include <stdlib.h>
using namespace std;
// Bai 3
// Author: Kem
 #include <iostream>
#include "vector.h" // class's header file
#include <assert.h>
#include <iomanip>
using namespace std;
template <class T>
class vector
{
	protected:
		const int n;
		T *arr;
		static int id;
	public:
		// class constructor
		vector(int);
		// class destructor
		~vector();
		vector(const vector &);
		const vector operator=(const vector &);
		vector operator+=(const vector &);		
		vector operator+(const vector &) const;		
		vector operator-(const vector &) const;
		vector operator*(T) const;
		T operator*(const vector&) const;
		template <class S,class V>
		friend vector<V> operator*(S,const vector<V> &);
		template <class V>
		friend istream &operator>>(istream &,vector<V> &);
		template <class V>
		friend ostream &operator<<(ostream &,const vector<V> &);
		T &operator[](int) const;
		float operator~()const;
		static int ID(){ return id;};
		
};
#include "vectorcpp.h"

#endif // VECTOR_H
