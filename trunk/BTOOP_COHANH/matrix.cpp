// Class automatically generated by Dev-C++ New Class wizard

#include "matrix.h" // class's header file
#include <assert.h>
#include <iomanip>
#define row(i,col) (i/col)
#define col(i,col) (i%col)

// class constructor
matrix::matrix(int n,int m):n(n),m(m)
{
	assert(n>0 && m>0);
	id++;
	arr=new float[n*m];
	for (int i=0;i<n*m;i++) arr[i]=0;
}

// class destructor
matrix::~matrix()
{
	id--;
	delete []arr;
}
int matrix::id=0;
matrix::matrix(const matrix &obj):n(obj.n),m(obj.m){
	id++;
	arr=new float[n*m];
	for (int i=0;i<n*m;i++) arr[i]=obj[i];
	};
const matrix matrix::operator=(const matrix &obj){
	if (this==&obj) return *this;
	else 
	if (n!=obj.n || m!=obj.m) cout<<endl<<"Error during execute operator =";
	else
		for (int i=0;i<n*m;i++) arr[i]=obj[i];
	return *this;
	};
float &matrix::operator[](int p)const{
	if (p>=0 && p<n*m) return arr[p];
	};

float &matrix::operator()(int i,int j)const{
	if (i*m+j>=0 && i*m+j<n*m) return arr[i*m+j];
	};
	
istream &operator>>(istream &is,matrix &obj){
	for (int i=0;i<obj.n*obj.m;i++){
		cout<<"arr["<<row(i,obj.m)<<","<<col(i,obj.m)<<"]="; 
		is>>obj.arr[i];
		}
	return is;
	};
ostream &operator<<(ostream &os,const matrix &obj){
	for (int i=0;i<obj.n*obj.m;i++){
		if(i%obj.m==0) os<<endl;		
		os<<setw(4)<<obj.arr[i];
		}
	return os;
	};
matrix matrix::operator+(const matrix &obj) const{
	if (obj.n!=n && obj.m!=m) cout<<endl<<"Error during execute operator +";
	else{
		matrix tem(n,m);
		for (int i=0;i<n*m;i++) tem[i]=arr[i]+obj[i];
		return tem;
		}
	return *this;	
	};		
matrix matrix::operator-(const matrix &obj) const{
	if (obj.n!=n && obj.m!=m) cout<<endl<<"Error during execute operator -";
	else{
		matrix tem(n,m);
		for (int i=0;i<n*m;i++) tem[i]=arr[i]- obj[i];
		return tem;
		}
	return *this;	
	};
matrix matrix::operator*(float k) const{
	matrix tem(n,m);
	for (int i=0;i<n*m;i++) tem[i]=k*arr[i];
	return tem;
	};

matrix operator*(float k,const matrix &obj){
	matrix tem(obj.n,obj.m);
	for (int i=0;i<obj.n*obj.m;i++) tem[i]=k*obj[i];
	return tem;
	};
matrix matrix::operator*(const matrix &obj) const{
	if (m!=obj.n) cout<<endl<<"Error during execute operator * between two matrix";
	else{
		matrix tem(n,obj.m);
		for(int i=0;i<tem.n;i++)
			for(int j=0;j<tem.m;j++)
				for(int k=0;k<m;k++)
					tem(i,j)+= arr[i*m+k]*obj(k,j);
		return tem;
		}
	return *this;	
	};
